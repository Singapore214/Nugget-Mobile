// File automatically generated by swift-bridge.
#include <stdbool.h>
typedef struct __swift_bridge__$MinimuxerError$FieldOfInstallApp {void* _0;} __swift_bridge__$MinimuxerError$FieldOfInstallApp;
union __swift_bridge__$MinimuxerErrorFields { __swift_bridge__$MinimuxerError$FieldOfInstallApp InstallApp;};
typedef enum __swift_bridge__$MinimuxerErrorTag { __swift_bridge__$MinimuxerError$NoDevice, __swift_bridge__$MinimuxerError$NoConnection, __swift_bridge__$MinimuxerError$PairingFile, __swift_bridge__$MinimuxerError$CreateDebug, __swift_bridge__$MinimuxerError$CreateInstproxy, __swift_bridge__$MinimuxerError$LookupApps, __swift_bridge__$MinimuxerError$FindApp, __swift_bridge__$MinimuxerError$BundlePath, __swift_bridge__$MinimuxerError$MaxPacket, __swift_bridge__$MinimuxerError$WorkingDirectory, __swift_bridge__$MinimuxerError$Argv, __swift_bridge__$MinimuxerError$LaunchSuccess, __swift_bridge__$MinimuxerError$Detach, __swift_bridge__$MinimuxerError$Attach, __swift_bridge__$MinimuxerError$CreateAfc, __swift_bridge__$MinimuxerError$RwAfc, __swift_bridge__$MinimuxerError$InstallApp, __swift_bridge__$MinimuxerError$UninstallApp, __swift_bridge__$MinimuxerError$CreateMisagent, __swift_bridge__$MinimuxerError$ProfileInstall, __swift_bridge__$MinimuxerError$ProfileRemove, } __swift_bridge__$MinimuxerErrorTag;
typedef struct __swift_bridge__$MinimuxerError { __swift_bridge__$MinimuxerErrorTag tag; union __swift_bridge__$MinimuxerErrorFields payload;} __swift_bridge__$MinimuxerError;
typedef struct __swift_bridge__$Option$MinimuxerError { bool is_some; __swift_bridge__$MinimuxerError val; } __swift_bridge__$Option$MinimuxerError;

void* __swift_bridge__$describe_error(struct __swift_bridge__$MinimuxerError error);
bool __swift_bridge__$ready(void);
void __swift_bridge__$set_debug(bool debug);


// File automatically generated by swift-bridge.
#include <stdint.h>
typedef struct RustDirectoryEntry RustDirectoryEntry;
void __swift_bridge__$RustDirectoryEntry$_free(void* self);

void* __swift_bridge__$Vec_RustDirectoryEntry$new(void);
void __swift_bridge__$Vec_RustDirectoryEntry$drop(void* vec_ptr);
void __swift_bridge__$Vec_RustDirectoryEntry$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RustDirectoryEntry$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RustDirectoryEntry$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RustDirectoryEntry$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RustDirectoryEntry$len(void* vec_ptr);
void* __swift_bridge__$Vec_RustDirectoryEntry$as_ptr(void* vec_ptr);

typedef struct AfcFileManager AfcFileManager;
void __swift_bridge__$AfcFileManager$_free(void* self);

void* __swift_bridge__$Vec_AfcFileManager$new(void);
void __swift_bridge__$Vec_AfcFileManager$drop(void* vec_ptr);
void __swift_bridge__$Vec_AfcFileManager$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_AfcFileManager$pop(void* vec_ptr);
void* __swift_bridge__$Vec_AfcFileManager$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_AfcFileManager$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_AfcFileManager$len(void* vec_ptr);
void* __swift_bridge__$Vec_AfcFileManager$as_ptr(void* vec_ptr);

struct __swift_bridge__$ResultVoidAndErrors __swift_bridge__$AfcFileManager$remove(void* path);
struct __swift_bridge__$ResultVoidAndErrors __swift_bridge__$AfcFileManager$create_directory(void* path);
struct __swift_bridge__$ResultVoidAndErrors __swift_bridge__$AfcFileManager$write_file(void* to, struct __private__FfiSlice bytes);
struct __swift_bridge__$ResultVoidAndErrors __swift_bridge__$AfcFileManager$copy_file_outside_afc(void* from, void* to);
void* __swift_bridge__$AfcFileManager$contents(void);
void* __swift_bridge__$RustDirectoryEntry$path(void* self);
void* __swift_bridge__$RustDirectoryEntry$parent(void* self);
bool __swift_bridge__$RustDirectoryEntry$is_file(void* self);
struct __private__OptionU32 __swift_bridge__$RustDirectoryEntry$size(void* self);
void* __swift_bridge__$RustDirectoryEntry$children(void* self);
typedef enum __swift_bridge__$ResultVoidAndErrors$Tag {__swift_bridge__$ResultVoidAndErrors$ResultOk, __swift_bridge__$ResultVoidAndErrors$ResultErr} __swift_bridge__$ResultVoidAndErrors$Tag;
union __swift_bridge__$ResultVoidAndErrors$Fields {struct __swift_bridge__$MinimuxerError err;};
typedef struct __swift_bridge__$ResultVoidAndErrors{__swift_bridge__$ResultVoidAndErrors$Tag tag; union __swift_bridge__$ResultVoidAndErrors$Fields payload;} __swift_bridge__$ResultVoidAndErrors;


// File automatically generated by swift-bridge.
void* __swift_bridge__$fetch_udid(void);
bool __swift_bridge__$test_device_connection(void);


// File automatically generated by swift-bridge.
struct __swift_bridge__$ResultVoidAndErrors __swift_bridge__$yeet_app_afc(void* bundle_id, struct __private__FfiSlice ipa_bytes);
struct __swift_bridge__$ResultVoidAndErrors __swift_bridge__$install_ipa(void* bundle_id);
struct __swift_bridge__$ResultVoidAndErrors __swift_bridge__$remove_app(void* bundle_id);


// File automatically generated by swift-bridge.
struct __swift_bridge__$ResultVoidAndErrors __swift_bridge__$debug_app(void* app_id);
struct __swift_bridge__$ResultVoidAndErrors __swift_bridge__$attach_debugger(uint32_t pid);


// File automatically generated by swift-bridge.
void __swift_bridge__$start_auto_mounter(void* docs_path);


// File automatically generated by swift-bridge.
struct __swift_bridge__$ResultVoidAndErrors __swift_bridge__$start(void* pairing_file, void* log_path);
void __swift_bridge__$target_minimuxer_address(void);


// File automatically generated by swift-bridge.
struct __swift_bridge__$ResultVoidAndErrors __swift_bridge__$install_provisioning_profile(struct __private__FfiSlice profile);
struct __swift_bridge__$ResultVoidAndErrors __swift_bridge__$remove_provisioning_profile(void* id);
struct __swift_bridge__$ResultStringAndErrors __swift_bridge__$dump_profiles(void* docs_path);
typedef enum __swift_bridge__$ResultStringAndErrors$Tag {__swift_bridge__$ResultStringAndErrors$ResultOk, __swift_bridge__$ResultStringAndErrors$ResultErr} __swift_bridge__$ResultStringAndErrors$Tag;
union __swift_bridge__$ResultStringAndErrors$Fields {void* ok; struct __swift_bridge__$MinimuxerError err;};
typedef struct __swift_bridge__$ResultStringAndErrors{__swift_bridge__$ResultStringAndErrors$Tag tag; union __swift_bridge__$ResultStringAndErrors$Fields payload;} __swift_bridge__$ResultStringAndErrors;


